## Knapsack Problem

## This method uses recursion and is the top-down approach to the problem.
## Memoization is not required in this case.
## Here index = the number of pearls - 1
def maxValueRec(values, weights, index, maxWeight):
    if(len(values) != len(weights)):
        raise Exception("Your pearlValues and pearlWeights \
                        are of different lengths")

    than maxWeight. If we find only 1, maxValue is that one; if it's 0,
    maxValue is 0; if it's > 1, we'll run through all the different 
    combinations to compute the maximum value"""
    possibleWeights = []
    for i in range(len(weights)):
        if (weights[i] <= maxWeight):
            possibleWeights.append(i)
    if (len(possibleWeights) == 0):
        #No possible weights => max value = 0.
        return 0
    elif (len(possibleWeights) == 1):
        #Only 1 possible weight => max value = that weight
        return values[possibleWeights[0]]
    else:
        #otherwise, run through combinations with reduced maxWeights
        possibleSums = []
        #first, check if maxWeight is in the weights; if it is, add it.
        for i in possibleWeights:
            if (weights[i] == maxWeight):
                possibleSums.append(values[i])
        #now run through all the combinations
        for j in xrange(1, maxWeight / 2 + 1):
            netsum = maxValueRec(values, weights, index, j) + \
                maxValueRec(values, weights, index, maxWeight - j)
            possibleSums.append(netsum)
            print possibleSums
        return max(possibleSums)

## This takes 3 parameters.  "pearlValue" is a list of each pearl's value. 
## "pearlWeight" is the weight of each corresponding pearl.  "maxWeight" is
## the maximum weight the bag can hold.  
def maxValueDyn(values, weights, maxWeight):
    if(len(values) != len(weights)):
        raise Exception("Your pearlValues and pearlWeights \
                        are of different lengths")
    ## TODO

if __name__ == "__main__":
    ## Basic test code:
    v = [5, 2, 1, 4, 9, 3, 8]
    w = [10, 20, 4, 6, 9, 12, 14]
    maxWeight = 47
    if maxValueRec(v, w,len(v)- 1,maxWeight) != 27:
        print "Your code doesn't seem to work!"
    else:
        print "Congrats! Your code works!"
    if maxValueDyn(v, w, maxWeight) != 27:
        print "Your code doesn't seem to work!"
    else:
        print "Congrats! Your code works!"
    
