/*
 * GameLogic.java
 * Implements all the logic for Missile Command.
 *
 * Authors:       Joseph Gonzalez, Robert Morell, Brian Emre Aydemir
 */
package missilecommand;

import java.util.*;

/**
 * Implements all the logic for Missile Command.
 **/
public class GameLogic {

  /** The space to put between buildings, in pixels. **/
  public final static int BUILDING_SPACING = 30;

  /** The width of each building, in pixels. **/
  public final static int BUILDING_WIDTH = 60;

  /** The maximum height to make each building, in pixels. **/
  public final static int MAX_HEIGHT = 50;

  /** Used to determine the velocity of newly created missiles. **/
  public final static int MAX_VEL = 10;

  /** Power regeneration rate. **/
  public final static float POWER_REGEN = .005F;

  /** Power loss rate (per click). **/
  public final static float POWER_HIT = .01F;

  /* Counts the number of cycles; used to create missiles*/
  private int cycleCount = 0;

  
  /**
   * Random number generator.
   * Defaults to a generator seeded with the current time.
   **/
  private Random gen = new Random();

  /**
   * Creates a new instance of GameLogic with all fields set to their
   * default values.
   **/
  public GameLogic() { }

  /** Runs the game for one time step. **/
  public void updateCycle(GameState state) {
    createMissiles(state);
    updateMissiles(state);
    updatePlayerInput(state);
    updateExplosions(state);

    if(state.power < 1.0) {
      state.power += POWER_REGEN;
    }
  }

  /**
   * Updates the state of the missiles by one time step by moving them
   * appropriately and checking for collisions with buildings.
   **/
  private void updateMissiles(GameState state) {
    Iterator missiles = state.missiles.iterator();
    boolean buildingHit;

    // Iterate over each currently active missile.
    while(missiles.hasNext()) {
      Missile m = (Missile)missiles.next();
      // Move the missile and get its new location.
      m.move();
      Vector2D location = m.getLocation();

      if (location.getIComp() < 0 ||
          location.getIComp() > state.worldWidth)
      {
        // Missile went off the left or right edge of the screen.
        missiles.remove();
      }
      else if (location.getJComp() < 0)
      {
        // The missile hit the ground.
        location.setJComp(0);
        missiles.remove();
        buildingHit = true;
        state.explosions.add(m.explode());
      }
      else
      {
        // Loop over all the buildings to see if we hit any of them.
        buildingHit = false;
        for(Building b : state.buildings) {
          if(b.isInterior(m.getLocation())) {
            missiles.remove();
            buildingHit = true;
            state.explosions.add(m.explode());
          }
        }		
      }
    }
  }
  
  /** Adds missiles to the game (as defined by the state object). **/
  private void createMissiles(GameState state) {
	  	cycleCount++;
	  	if (cycleCount % 4 == 0) {
	  		int X = gen.nextInt(state.worldWidth); 
	  		int Y = state.worldHeight;
	  		int xVelocity = 0;
	  		int yVelocity = -5;
	  		Vector2D location = new Vector2D(X, Y);
	  		Vector2D velocity = new Vector2D(xVelocity, yVelocity);
	  		Missile missile = new Missile(location, velocity);
	  		state.missiles.add(missile);
	  	}
  

  }

  /**
   * Processes all the clicks by the user since this method
   * was last called.
   **/
  private void updatePlayerInput(GameState state){
    Iterator clicks = state.playerClicks.iterator();
    boolean isExplosionClick = true;

    // Loop over all the clicks.
    while (clicks.hasNext()) {
      Vector2D c = (Vector2D)clicks.next();
      clicks.remove();
      /* If it's not a left click, drop a nuke */
      if (c.getType() != 1) {
    	  /* if we don't have any more nukes, don't do anything. */
    	  if (!state.hasNuke()) {
    		  continue;
    	  }
    	  /* Otherwise, drop the massive explosion */
    	  state.useNuke();
    	  state.explosions.add(new Explosion(c, 300, 7));
    	  continue;
      }
      
      // Used to indicate if c should create an explosion or not.
      isExplosionClick = true;

      // Loop over all the buildings to see if the player clicked on one.
      for(Building b : state.buildings) {
        if (b.isInterior(c)) {
          // Clicked inside a building.
          state.power -=  0.5F;

          // Do create an explosion by clicking on a building.
          isExplosionClick = true;
        }
      }

      // Check to see if we need to create an explosion.
      if (isExplosionClick && state.power > 0.0F) {
        // TODO: modify what happens when an explosion is created.


        // Decrease the power so that future explosions are smaller.
        state.power -= POWER_HIT;

        // Create an explosion.  The maximum size depends on the power.
        state.explosions.add(new Explosion(c, (int)(50*state.power), 5));
      }
    }
  }

  /**
   * Check to see if explosions have destroyed missiles or buildings.
   **/
  private void updateExplosions(GameState state) {
    Iterator explosions = state.explosions.iterator();

    // Used to keep track of any new explosions, such as ones
    // created when an existing explosion destroys a missile.
    LinkedList<Explosion> newExplosions = new LinkedList<Explosion>();

    // Loop over the current set of explosions.
    while (explosions.hasNext()) {
      Explosion e = (Explosion)explosions.next();

      if (e.explode()) {
        // The explosion has reached its maximum size.
        explosions.remove();
      } else {
        // Check if the explosion has destroyed a missile.
        Iterator missiles = state.missiles.iterator();
        while (missiles.hasNext()) {
          Missile m = (Missile)missiles.next();
          if (e.intersects(m)) {
        	  Vector2D location = m.getLocation();
        	  Message msg = new Message("+69", location.getIComp(), state.worldHeight - location.getJComp(), 20);
        	  state.messages.add(msg);
        	  /* If it intersects the missile, the missile dies;
        	   * we'll remove it.
        	   */
        	  missiles.remove();
        	  //Whenever a missile dies, increment the score by 69
        	  state.incrementScore(69);
        	  
          }
        }

        // Check if the explosion hit a building.
        Iterator buildings = state.buildings.iterator();
        while (buildings.hasNext()) {
          Building b = (Building)buildings.next();
          if (e.intersects(b)) {
        	  /* Damage the building, and if the building is out
        	   * of health, remove it.
        	   */
        	  b.damage();
        	  if (b.isDestroyed()) {
        		  buildings.remove();
        	  }
          }
        }
      }
    }

    // Add all the new explosions now.
    state.explosions.addAll(newExplosions);
  }

  /**
   * Initializes the game state by setting the power and adding
   * buildings.
   **/
  public void initializeGameState(GameState state) {
    initializeSkyLine(state);
    state.power = 1.0F;
  }
  
  /** Initializes a row of buildings with the given width, height, and Y.
   * Distances between buildings are chosen randomly. **/
  
  private void initializeBuildingRow(GameState state, int buildingWidth, 
		  int buildingHeight, int Y) {
	  int X = 0;
	  while (X < state.worldWidth - buildingWidth) {
		  //Initialize the vectors representing corners of the new building
		  Vector2D topLeft, bottomRight;
		  Building newBuilding;
		  topLeft = new Vector2D(X, Y + buildingHeight); // initialize points.
		  bottomRight = new Vector2D(X + buildingWidth, Y);
		  newBuilding = new Building(topLeft, bottomRight); // create the building.
		  state.buildings.add(newBuilding); // add your new building to the linked list.
		  //Now set the distance between this and the next building to be random
		  X += buildingWidth + gen.nextInt(buildingWidth);
		  
	  }
  }
  
  /** Adds buildings to the game (as defined by the state object). **/
  
  private void initializeSkyLine(GameState state) {
	  /* the width / height of our buildings */
	  int buildingWidth = 40;
	  int buildingHeight = 30;
	  //number of rows.
	  int rowCount = 3;
	  //Now we'll initialize rows
	  for (int i = 0; i < rowCount; i++) {
		  //The distance between consecutive rows is buildingHeight
		  int Y = i * 2 * buildingHeight;
		  initializeBuildingRow(state, buildingWidth, buildingHeight, Y);
	  }
  }

  
  
  /** Returns true if and only if the game is over. **/
  public boolean isGameOver(GameState state) {
	  /* if there aren't any more buildings, the game is over */
	  if (state.buildings.size() == 0) {
		  return true;
	  }
	  return false;
  }

}
