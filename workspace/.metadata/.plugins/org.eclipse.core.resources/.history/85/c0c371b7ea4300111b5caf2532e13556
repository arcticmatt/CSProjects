/**
 * A MergeSorter sorts arrays using the merge sort algorithm.
 */
public class MergeSorter extends BaseSorter {

  /**
   * Sorts an array using the merge sort algorithm.
   * 
   * @param array The array to be sorted.
   */
  protected void doSort(double[] array) {
    // TODO: Implement this method.
  }

  private double[] mergeSort(double[] array) {
	  /* Runs the merge sort on the given array, returning the
	   * result.
	   */
	  if (array.length <= 1) {
		  //if it's too short, it's already sorted
		  return array;
	  }
	  //Calculate the dividing index.
	  int divider = array.length / 2;
	  double[] array1 = new double[divider];
	  double[] array2 = new double[array.length - divider];
	  /* now place all elements with indexes less than divider
	   * into array1; all others into array2.
	   */
	  for (int i = 0; i < array.length; i++) {
		  if (i < divider) {
			  array1[i] = array[i];
		  } else {
			  array2[i - divider] = array[i];
		  }
	  }
	  
  }
  
  private double[] merge(double[] array1, double[] array2) {
	  /* Merges 2 sorted arrays, and returns the result */
	  int totalElements = array1.length + array2.length;
	  //result is the array we'll return
	  double[] result = new double[totalElements];
	  //the indexes into the first array and the second array
	  int array1Index, array2Index;
	  array1Index = 0;
	  array2Index = 0;
	  /* now run through all the elements, placing the minimum of
	   * array1 and array2 into the result.
	   */
	  for (int i = 0; i < totalElements; i++) {
		  if (array1[array1Index] < array2[array2Index]) {
			  /* if the element in array1 is less than the 
			   * one in array2, place that into result.
			   */
			  result[i] = array1[array1Index];
			  array1Index++;
		  } else {
			  //otherwise, place the element in array2 in result.
			  result[i] = array2[array2Index];
			  array2Index++;
		  }
	  }
	  return result;
  }
  
}
