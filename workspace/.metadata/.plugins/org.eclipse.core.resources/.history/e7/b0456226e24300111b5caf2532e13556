import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.util.Deque;
import java.util.LinkedList;

import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * A class to provide custom drawing for visualizing the Towers of Hanoi. 
 * 
 * @author Justin Johnson
 */
@SuppressWarnings("serial")
public class HanoiPanel extends JPanel {
  
  // The delay (in milliseconds) between each frame of the animation.
  private final int DELAY = 30;

  // Width of the pegs as a fraction of the width of the window.
  private static final double PEG_WIDTH = 0.01;

  // Height of the pegs as a fraction of the height of the window.
  private static final double PEG_HEIGHT = 0.9;
  
  // The color of the pegs.
  private static final Color PEG_COLOR = Color.BLACK;
  
  // Width of the smallest disk as a fraction of the width of the window.
  private static final double MIN_DISK_WIDTH = 3 * PEG_WIDTH;
  
  // Width of the biggest disk as a fraction of the width of the window.
  private static final double MAX_DISK_WIDTH = 0.3;
  
  // The interior color of the disks.
  private static final Color DISK_FILL_COLOR = Color.YELLOW;
  
  // The border color of the disks.
  private static final Color DISK_OUTLINE_COLOR = Color.BLACK;

  // A HanoiPanel keeps its own private HanoiGame on which it runs its moves.
  private HanoiGame hanoi;
  
  // The moves that should be visualized.
  private Deque<int[]> moves;
  
  private Timer timer;
  
  /**
   * Creates a new HanoiPanel with a specified number of disks.
   * 
   * @param numDisks The number of disks.
   */
  public HanoiPanel(int numDisks) {
    hanoi = new HanoiGame(numDisks);
    moves = new LinkedList<int[]>();
    timer = new Timer(DELAY, new HanoiActionListener());
    timer.start();
  }

  /**
   * Gets the default size of this panel.
   */
  public Dimension getPreferredSize() {
    return new Dimension(600, 300);
  }
  
  /**
   * Schedules a move to be visualized.
   * 
   * @param start The starting peg of the move.
   * @param finish The ending peg of the move.
   */
  public void scheduleMove(int start, int finish) {
    moves.add(new int[] {start, finish});
  }
  
  /**
   * Private helper method to make a move.
   */
  private void makeMove() {
    if (!moves.isEmpty()) {
      int[] move = moves.remove();
      int start = move[0];
      int finish = move[1];
      if (hanoi.isValidMove(start, finish)) {
        hanoi.makeMove(start, finish);
      }
      
      repaint();
    }
  }
  
  /**
   * Check to see if this panel is currently animating. 
   */
  public boolean isRunning() {
    return timer.isRunning() && moves.size() > 0;
  }

  /**
   * Refresh the graphics of the component.
   */
  public void paintComponent(Graphics g) {
    super.paintComponent(g);

    if (!(g instanceof Graphics2D)) {
      System.err.println("No Graphics2D");
      System.exit(1);
    }

    if (!(g instanceof Graphics2D)) {
      System.err.println("No Graphics2D; quitting");
      System.exit(1);
    }
    Graphics2D g2 = (Graphics2D) g;

    Rectangle bounds = g2.getClipBounds();

    // Draw the pegs.
    double gap = (1.0 - 3.0 * PEG_WIDTH) / 6.0;
    g2.setColor(PEG_COLOR);
    for (int i = 0; i < HanoiGame.NUM_PEGS; i++) {
      double x = (2 * i + 1) * gap + i * PEG_WIDTH;
      x *= bounds.getWidth();

      double w = PEG_WIDTH * bounds.getWidth();
      double y = (1.0 - PEG_HEIGHT) * bounds.getHeight();
      double h = PEG_HEIGHT * bounds.getHeight();

      Rectangle2D peg = new Rectangle2D.Double(x, y, w, h);
      g2.fill(peg);
    }
    
    // Draw the disks.
    double diskHeight = PEG_HEIGHT / hanoi.getNumDisks() * bounds.getHeight();
    gap = (1.0 - 3.0 * MAX_DISK_WIDTH) / 6.0;
    for (int p = 0; p < HanoiGame.NUM_PEGS; p++) {
      double y = bounds.getHeight() - hanoi.getNumDisks(p) * diskHeight;
      for (int disk : hanoi.getPeg(p)) { 
        
        double diskWidth = (MAX_DISK_WIDTH - MIN_DISK_WIDTH);
        diskWidth *= disk / (hanoi.getNumDisks() - 1.0);
        diskWidth += MIN_DISK_WIDTH;
        diskWidth *= bounds.getWidth();
        
        double x = (2 * p + 1) * gap + p * MAX_DISK_WIDTH;
        x *= bounds.getWidth();
        x += (MAX_DISK_WIDTH * bounds.getWidth() - diskWidth) / 2.0;
                
        Rectangle2D rect = new Rectangle2D.Double(x, y, diskWidth, diskHeight);
        g2.setColor(DISK_FILL_COLOR);
        g2.fill(rect);
        g2.setColor(DISK_OUTLINE_COLOR);
        g2.draw(rect);
        
        y += diskHeight;
      }
    }
    

  }
  
  /**
   * Private nonstatic inner class to prevent ActionListener from leaking into
   * public interface of HanoiPanel.
   * 
   * @author Justin
   *
   */
  private class HanoiActionListener implements ActionListener {

    /**
     * Simply make a move whenver the timer fires.
     */
    public void actionPerformed(ActionEvent e) {
      makeMove();
    }
    
  }

}
