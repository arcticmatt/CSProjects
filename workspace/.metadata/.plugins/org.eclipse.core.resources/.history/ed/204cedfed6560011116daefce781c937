
/**
 * An implementation of the Fourier transform using the recursive fast Fourier
 * transform (FFT) algorithm.
 * 
 * @author Justin Johnson
 *
 */
public class RecursiveFourierTransform extends FourierTransform {

  /**
   * Computes the discrete Fourier transform of the input data using the FFT
   * algorithm.
   * @param input The complex numbers to be transformed. The length of input
   * must be a power of two.
   * @return An array of complex numbers containing the discrete Fourier
   * transform of the input data.
   */
  public ComplexNumber[] transform(ComplexNumber[] input) {
    int n = input.length;
    if (!powerOfTwo(n)) {
      throw new IllegalArgumentException("input.length must be a power of " +
      		"2 but input.length = " + input.length);
    }
    
    ComplexNumber[] output;
    ComplexNumber w = ComplexNumber.getRootOfUnity(n, -1);
    output = FFT(input, w, n);
    return output;
  }

  private ComplexNumber[] FFT(ComplexNumber[] a, ComplexNumber w, int n) {
	  if (n == 1) {
		  return a;
	  }
	  ComplexNumber[] evens, odds;
	  ComplexNumber[] tmpEven = new ComplexNumber[n/2];
	  ComplexNumber[] tmpOdd = new ComplexNumber[n/2];
	  for (int i = 0; i < n/2; i++) {
		  tmpEven[i] = a[2*i];
		  tmpOdd[i] = a[2*i+1];
	  }
	  evens = FFT(tmpEven, w.times(w), n/2);
	  odds = FFT(tmpOdd, w.times(w), n/2);
	  ComplexNumber x = ComplexNumber.ONE;
	  for (int i = 0; i <= n/2-1; i++) {
		  a[i] = evens[i].plus(x.times(odds[i]));
		  a[i+n/2] = evens[i].minus(x.times(odds[i]));
		  x=x.times(w);
	  }
	  return a;
  }
  
}
